// <auto-generated />
using System;
using DeveloperStore.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DeveloperStore.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250331002447_Sales_and_SalesItem_RemoveMoney_v1")]
    partial class Sales_and_SalesItem_RemoveMoney_v1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DeveloperStore.Domain.Entities.Branch", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<string>("City")
                        .HasColumnType("text")
                        .HasColumnName("city");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Phone")
                        .HasColumnType("text")
                        .HasColumnName("phone");

                    b.Property<string>("State")
                        .HasColumnType("text")
                        .HasColumnName("state");

                    b.Property<string>("ZipCode")
                        .HasColumnType("text")
                        .HasColumnName("zipcode");

                    b.HasKey("Id")
                        .HasName("pk_branches");

                    b.ToTable("branches");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Address = "123 Main St",
                            City = "New York",
                            Name = "Main Branch",
                            Phone = "123-456-7890",
                            State = "NY",
                            ZipCode = "10001"
                        },
                        new
                        {
                            Id = 2L,
                            Address = "456 Elm St",
                            City = "Los Angeles",
                            Name = "Secondary Branch",
                            Phone = "987-654-3210",
                            State = "CA",
                            ZipCode = "90001"
                        });
                });

            modelBuilder.Entity("DeveloperStore.Domain.Entities.Customer", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("firstname");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("lastname");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("phone");

                    b.HasKey("Id")
                        .HasName("pk_customers");

                    b.ToTable("customers");
                });

            modelBuilder.Entity("DeveloperStore.Domain.Entities.Product", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("category");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text")
                        .HasColumnName("imageurl");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_products");

                    b.ToTable("products");
                });

            modelBuilder.Entity("DeveloperStore.Domain.Entities.Sale", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<long>("BranchId")
                        .HasColumnType("bigint")
                        .HasColumnName("branchid");

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint")
                        .HasColumnName("customerid");

                    b.Property<DateTime>("SaleDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("saledate");

                    b.Property<string>("SaleNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("salenumber");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("numeric")
                        .HasColumnName("totalamount");

                    b.HasKey("Id")
                        .HasName("pk_sales");

                    b.HasIndex("BranchId")
                        .HasDatabaseName("ix_sales_branchid");

                    b.HasIndex("CustomerId")
                        .HasDatabaseName("ix_sales_customerid");

                    b.ToTable("sales");
                });

            modelBuilder.Entity("DeveloperStore.Domain.Entities.SaleItem", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint")
                        .HasColumnName("productid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<long>("SaleId")
                        .HasColumnType("bigint")
                        .HasColumnName("saleid");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("numeric")
                        .HasColumnName("totalprice");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("numeric")
                        .HasColumnName("unitprice");

                    b.HasKey("Id")
                        .HasName("pk_saleitems");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("ix_saleitems_productid");

                    b.HasIndex("SaleId")
                        .HasDatabaseName("ix_saleitems_saleid");

                    b.ToTable("saleitems");
                });

            modelBuilder.Entity("DeveloperStore.Domain.Entities.Product", b =>
                {
                    b.OwnsOne("DeveloperStore.Domain.ValueObjects.Rating", "Rating", b1 =>
                        {
                            b1.Property<long>("ProductId")
                                .HasColumnType("bigint");

                            b1.Property<int>("Count")
                                .HasColumnType("integer")
                                .HasColumnName("count");

                            b1.Property<double>("Rate")
                                .HasColumnType("double precision")
                                .HasColumnName("rate");

                            b1.HasKey("ProductId");

                            b1.ToTable("rating");

                            b1.WithOwner()
                                .HasForeignKey("ProductId");
                        });

                    b.Navigation("Rating")
                        .IsRequired();
                });

            modelBuilder.Entity("DeveloperStore.Domain.Entities.Sale", b =>
                {
                    b.HasOne("DeveloperStore.Domain.Entities.Branch", "Branch")
                        .WithMany("Sales")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_sales_branches_branchid");

                    b.HasOne("DeveloperStore.Domain.Entities.Customer", "Customer")
                        .WithMany("Sales")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_sales_customers_customerid");

                    b.Navigation("Branch");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("DeveloperStore.Domain.Entities.SaleItem", b =>
                {
                    b.HasOne("DeveloperStore.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_saleitems_products_productid");

                    b.HasOne("DeveloperStore.Domain.Entities.Sale", "Sale")
                        .WithMany("Items")
                        .HasForeignKey("SaleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_saleitems_sales_saleid");

                    b.OwnsOne("DeveloperStore.Domain.ValueObjects.Discount", "Discount", b1 =>
                        {
                            b1.Property<long>("SaleItemId")
                                .HasColumnType("bigint");

                            b1.Property<decimal>("Percentage")
                                .HasColumnType("numeric")
                                .HasColumnName("percentage");

                            b1.HasKey("SaleItemId");

                            b1.ToTable("discount");

                            b1.WithOwner()
                                .HasForeignKey("SaleItemId");
                        });

                    b.Navigation("Discount")
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Sale");
                });

            modelBuilder.Entity("DeveloperStore.Domain.Entities.Branch", b =>
                {
                    b.Navigation("Sales");
                });

            modelBuilder.Entity("DeveloperStore.Domain.Entities.Customer", b =>
                {
                    b.Navigation("Sales");
                });

            modelBuilder.Entity("DeveloperStore.Domain.Entities.Sale", b =>
                {
                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
